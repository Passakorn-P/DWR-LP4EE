import pandas as pd
import numpy as np
import time
from DWR_LP4EE import DWR_LP4EE
from ORIG_LP4EE import ORIG_LP4EE

def get_example_dataset():

    example_maxwell_dataset = {'Syear': [92.0, 93.0, 90.0, 86.0, 88.0, 92.0, 87.0, 86.0, 87.0, 87.0, 90.0, 91.0, 90.0, 91.0, 92.0, 87.0, 91.0, 89.0, 85.0, 87.0, 90.0, 91.0, 89.0, 92.0, 91.0, 87.0, 92.0, 91.0, 92.0, 88.0, 88.0, 89.0, 88.0, 91.0, 90.0, 91.0, 85.0, 91.0, 88.0, 93.0, 91.0, 92.0, 92.0, 91.0, 89.0, 90.0, 90.0, 88.0, 90.0, 91.0, 93.0, 87.0, 88.0, 88.0, 89.0, 88.0, 85.0, 91.0, 90.0, 92.0, 90.0, 91.0],
                                'App': [2.0, 2.0, 1.0, 3.0, 2.0, 2.0, 2.0, 2.0, 2.0, 1.0, 2.0, 3.0, 3.0, 1.0, 2.0, 2.0, 2.0, 2.0, 3.0, 2.0, 3.0, 2.0, 2.0, 2.0, 2.0, 2.0, 3.0, 4.0, 1.0, 3.0, 5.0, 2.0, 2.0, 1.0, 2.0, 2.0, 3.0, 3.0, 5.0, 3.0, 1.0, 2.0, 2.0, 1.0, 3.0, 2.0, 1.0, 3.0, 2.0, 1.0, 3.0, 2.0, 5.0, 3.0, 3.0, 2.0, 2.0, 5.0, 3.0, 1.0, 3.0, 3.0],
                                'Har': [2.0, 2.0, 2.0, 2.0, 2.0, 3.0, 2.0, 2.0, 4.0, 2.0, 5.0, 1.0, 5.0, 2.0, 2.0, 2.0, 2.0, 2.0, 3.0, 2.0, 3.0, 3.0, 5.0, 2.0, 2.0, 2.0, 2.0, 3.0, 2.0, 2.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 2.0, 3.0, 2.0, 3.0, 5.0, 2.0, 2.0, 2.0, 2.0, 5.0, 5.0, 3.0, 2.0, 2.0, 3.0, 2.0, 2.0, 2.0, 2.0, 3.0, 2.0, 5.0, 3.0, 2.0, 3.0, 3.0],
                                'Dba': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
                                'Ifc': [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0],
                                'Source': [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 1.0, 2.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 1.0, 2.0, 2.0, 2.0, 2.0],
                                'Telonuse': [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0],
                                'Nlan': [3.0, 3.0, 2.0, 3.0, 2.0, 4.0, 2.0, 1.0, 2.0, 2.0, 1.0, 2.0, 3.0, 2.0, 2.0, 1.0, 4.0, 4.0, 4.0, 3.0, 4.0, 1.0, 1.0, 4.0, 3.0, 3.0, 2.0, 3.0, 4.0, 2.0, 2.0, 2.0, 1.0, 3.0, 4.0, 4.0, 1.0, 3.0, 2.0, 3.0, 1.0, 2.0, 3.0, 4.0, 1.0, 3.0, 3.0, 3.0, 2.0, 4.0, 2.0, 1.0, 3.0, 2.0, 2.0, 3.0, 1.0, 3.0, 4.0, 2.0, 4.0, 3.0],
                                'T01': [4.0, 2.0, 3.0, 2.0, 3.0, 2.0, 4.0, 2.0, 4.0, 2.0, 5.0, 2.0, 2.0, 2.0, 3.0, 2.0, 4.0, 4.0, 3.0, 4.0, 4.0, 4.0, 4.0, 2.0, 4.0, 4.0, 3.0, 1.0, 3.0, 2.0, 1.0, 3.0, 3.0, 4.0, 4.0, 4.0, 3.0, 4.0, 2.0, 4.0, 3.0, 3.0, 4.0, 3.0, 3.0, 4.0, 4.0, 5.0, 4.0, 4.0, 2.0, 2.0, 1.0, 4.0, 3.0, 3.0, 2.0, 4.0, 2.0, 3.0, 2.0, 2.0],
                                'T02': [3.0, 3.0, 3.0, 2.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 2.0, 3.0, 3.0, 4.0, 3.0, 1.0, 3.0, 2.0, 3.0, 4.0, 3.0, 3.0, 2.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 3.0, 4.0, 3.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 2.0, 3.0, 4.0, 3.0, 3.0, 3.0, 4.0, 2.0, 5.0, 4.0, 3.0, 3.0, 3.0, 4.0, 3.0, 4.0, 4.0, 3.0, 2.0, 3.0, 3.0, 3.0, 4.0],
                                'T03': [5.0, 3.0, 2.0, 4.0, 3.0, 3.0, 5.0, 3.0, 3.0, 2.0, 4.0, 2.0, 3.0, 2.0, 3.0, 2.0, 3.0, 4.0, 3.0, 4.0, 2.0, 2.0, 2.0, 2.0, 4.0, 3.0, 3.0, 2.0, 2.0, 3.0, 3.0, 2.0, 3.0, 4.0, 4.0, 4.0, 4.0, 4.0, 2.0, 2.0, 3.0, 2.0, 3.0, 4.0, 3.0, 3.0, 2.0, 3.0, 2.0, 2.0, 3.0, 3.0, 4.0, 5.0, 5.0, 3.0, 3.0, 4.0, 3.0, 3.0, 2.0, 3.0],
                                'T04': [3.0, 3.0, 3.0, 2.0, 4.0, 3.0, 4.0, 2.0, 2.0, 3.0, 2.0, 4.0, 4.0, 4.0, 3.0, 4.0, 3.0, 3.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 3.0, 4.0, 4.0, 3.0, 3.0, 2.0, 3.0, 3.0, 4.0, 3.0, 3.0, 3.0, 2.0, 4.0, 4.0, 3.0, 2.0, 4.0, 3.0, 4.0, 4.0, 5.0, 3.0, 3.0, 3.0, 3.0, 3.0, 4.0, 2.0, 3.0, 3.0, 3.0, 2.0, 3.0, 4.0, 3.0, 3.0, 3.0],
                                'T05': [3.0, 3.0, 3.0, 2.0, 3.0, 3.0, 3.0, 2.0, 1.0, 3.0, 3.0, 3.0, 2.0, 3.0, 3.0, 3.0, 3.0, 4.0, 3.0, 4.0, 3.0, 3.0, 2.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 2.0, 3.0, 3.0, 3.0, 5.0, 5.0, 5.0, 3.0, 4.0, 3.0, 4.0, 2.0, 3.0, 3.0, 4.0, 3.0, 4.0, 3.0, 2.0, 4.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 2.0, 3.0, 3.0, 3.0, 3.0, 3.0],
                                'T06': [3.0, 3.0, 4.0, 1.0, 3.0, 3.0, 2.0, 2.0, 2.0, 3.0, 1.0, 3.0, 2.0, 3.0, 3.0, 3.0, 4.0, 4.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 3.0, 2.0, 3.0, 3.0, 4.0, 3.0, 3.0, 3.0, 4.0, 3.0, 4.0, 2.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 2.0, 3.0, 3.0, 4.0, 2.0, 3.0],
                                'T07': [4.0, 2.0, 2.0, 3.0, 4.0, 2.0, 3.0, 4.0, 4.0, 2.0, 3.0, 1.0, 2.0, 3.0, 3.0, 4.0, 4.0, 5.0, 4.0, 3.0, 4.0, 4.0, 2.0, 4.0, 3.0, 4.0, 2.0, 2.0, 3.0, 3.0, 4.0, 3.0, 2.0, 4.0, 5.0, 5.0, 3.0, 3.0, 3.0, 4.0, 3.0, 3.0, 2.0, 3.0, 3.0, 5.0, 4.0, 4.0, 2.0, 3.0, 4.0, 3.0, 2.0, 4.0, 3.0, 3.0, 4.0, 3.0, 3.0, 4.0, 3.0, 4.0],
                                'T08': [5.0, 2.0, 3.0, 5.0, 3.0, 2.0, 5.0, 5.0, 5.0, 5.0, 3.0, 4.0, 4.0, 5.0, 3.0, 4.0, 5.0, 4.0, 5.0, 4.0, 3.0, 4.0, 4.0, 4.0, 3.0, 5.0, 4.0, 3.0, 5.0, 4.0, 5.0, 4.0, 3.0, 5.0, 3.0, 3.0, 4.0, 4.0, 4.0, 2.0, 3.0, 3.0, 3.0, 4.0, 3.0, 3.0, 4.0, 5.0, 2.0, 3.0, 2.0, 4.0, 3.0, 5.0, 3.0, 4.0, 5.0, 3.0, 4.0, 5.0, 5.0, 3.0],
                                'T09': [4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 5.0, 4.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 5.0, 4.0, 4.0, 5.0, 4.0, 5.0, 4.0, 5.0, 4.0, 5.0, 4.0, 4.0, 4.0, 2.0, 3.0, 5.0, 3.0, 3.0, 4.0, 5.0, 5.0, 5.0, 3.0, 4.0, 3.0, 4.0, 4.0, 5.0, 4.0, 4.0, 5.0, 4.0, 4.0, 5.0, 3.0, 4.0, 4.0, 4.0, 2.0, 4.0, 4.0, 4.0, 4.0, 5.0, 4.0, 5.0, 5.0, 5.0],
                                'T10': [5.0, 3.0, 5.0, 4.0, 4.0, 4.0, 5.0, 3.0, 2.0, 4.0, 2.0, 3.0, 3.0, 3.0, 5.0, 3.0, 4.0, 4.0, 4.0, 5.0, 4.0, 4.0, 4.0, 5.0, 4.0, 4.0, 3.0, 3.0, 3.0, 4.0, 2.0, 4.0, 2.0, 4.0, 5.0, 5.0, 3.0, 4.0, 3.0, 2.0, 3.0, 5.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 3.0, 3.0, 3.0, 3.0, 2.0, 3.0, 4.0, 4.0, 3.0, 3.0, 3.0, 5.0, 4.0, 5.0],
                                'T11': [4.0, 4.0, 4.0, 5.0, 3.0, 4.0, 3.0, 3.0, 2.0, 2.0, 2.0, 4.0, 5.0, 3.0, 2.0, 2.0, 4.0, 5.0, 4.0, 3.0, 5.0, 3.0, 2.0, 5.0, 3.0, 4.0, 2.0, 2.0, 3.0, 4.0, 3.0, 2.0, 3.0, 3.0, 4.0, 4.0, 3.0, 5.0, 3.0, 4.0, 3.0, 3.0, 3.0, 5.0, 4.0, 3.0, 3.0, 4.0, 3.0, 4.0, 4.0, 2.0, 2.0, 3.0, 2.0, 4.0, 3.0, 3.0, 4.0, 5.0, 5.0, 5.0],
                                'T12': [4.0, 4.0, 3.0, 4.0, 4.0, 4.0, 4.0, 3.0, 2.0, 3.0, 2.0, 4.0, 3.0, 4.0, 4.0, 4.0, 4.0, 5.0, 4.0, 4.0, 3.0, 4.0, 2.0, 4.0, 3.0, 4.0, 4.0, 4.0, 4.0, 4.0, 3.0, 4.0, 4.0, 5.0, 5.0, 5.0, 4.0, 5.0, 3.0, 3.0, 4.0, 3.0, 4.0, 4.0, 4.0, 5.0, 4.0, 4.0, 3.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 3.0, 4.0, 5.0, 4.0],
                                'T13': [4.0, 4.0, 2.0, 3.0, 5.0, 4.0, 4.0, 3.0, 3.0, 2.0, 1.0, 1.0, 3.0, 2.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 2.0, 2.0, 3.0, 2.0, 2.0, 4.0, 4.0, 2.0, 4.0, 3.0, 3.0, 3.0, 2.0, 4.0, 3.0, 3.0, 4.0, 4.0, 2.0, 4.0, 4.0, 2.0, 3.0, 3.0, 3.0, 2.0, 4.0, 3.0, 2.0, 4.0, 2.0, 4.0, 5.0, 3.0, 4.0, 4.0, 4.0, 3.0, 2.0, 3.0, 1.0, 4.0],
                                'T14': [4.0, 4.0, 3.0, 2.0, 4.0, 5.0, 2.0, 2.0, 4.0, 3.0, 1.0, 5.0, 4.0, 4.0, 3.0, 3.0, 3.0, 1.0, 2.0, 2.0, 3.0, 4.0, 3.0, 2.0, 3.0, 2.0, 2.0, 4.0, 5.0, 3.0, 4.0, 3.0, 4.0, 4.0, 4.0, 4.0, 3.0, 3.0, 4.0, 3.0, 4.0, 3.0, 3.0, 2.0, 2.0, 4.0, 5.0, 4.0, 4.0, 3.0, 3.0, 2.0, 3.0, 3.0, 3.0, 4.0, 2.0, 4.0, 4.0, 2.0, 5.0, 5.0],
                                'T15': [5.0, 4.0, 3.0, 3.0, 4.0, 4.0, 3.0, 3.0, 2.0, 3.0, 2.0, 1.0, 2.0, 3.0, 3.0, 3.0, 4.0, 4.0, 3.0, 3.0, 3.0, 3.0, 3.0, 4.0, 3.0, 4.0, 4.0, 3.0, 3.0, 4.0, 3.0, 3.0, 3.0, 5.0, 5.0, 5.0, 3.0, 4.0, 3.0, 4.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 3.0, 4.0, 4.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 4.0, 3.0, 3.0, 4.0, 4.0],
                                #'Duration': [16.0, 5.0, 8.0, 16.0, 12.0, 12.0, 27.0, 24.0, 54.0, 13.0, 21.0, 7.0, 10.0, 19.0, 11.0, 13.0, 32.0, 38.0, 40.0, 29.0, 14.0, 14.0, 28.0, 16.0, 13.0, 45.0, 4.0, 10.0, 12.0, 6.0, 28.0, 6.0, 6.0, 6.0, 11.0, 8.0, 22.0, 31.0, 26.0, 22.0, 7.0, 14.0, 6.0, 6.0, 15.0, 9.0, 9.0, 26.0, 13.0, 28.0, 13.0, 13.0, 12.0, 14.0, 12.0, 9.0, 30.0, 20.0, 16.0, 12.0, 15.0, 33.0],
                                'Size': [647.0, 130.0, 254.0, 1056.0, 383.0, 345.0, 209.0, 366.0, 1181.0, 181.0, 739.0, 108.0, 48.0, 249.0, 371.0, 211.0, 1849.0, 2482.0, 434.0, 292.0, 2954.0, 304.0, 353.0, 567.0, 467.0, 3368.0, 253.0, 196.0, 185.0, 387.0, 430.0, 204.0, 71.0, 840.0, 1648.0, 1035.0, 548.0, 2054.0, 302.0, 1172.0, 253.0, 227.0, 59.0, 299.0, 422.0, 1058.0, 65.0, 390.0, 193.0, 1526.0, 575.0, 509.0, 583.0, 315.0, 138.0, 257.0, 423.0, 495.0, 622.0, 204.0, 616.0, 3643.0],
                                #'Time': [8.0, 9.0, 6.0, 2.0, 4.0, 8.0, 3.0, 2.0, 3.0, 3.0, 6.0, 7.0, 6.0, 7.0, 8.0, 3.0, 7.0, 5.0, 1.0, 3.0, 6.0, 7.0, 5.0, 8.0, 7.0, 3.0, 8.0, 7.0, 8.0, 4.0, 4.0, 5.0, 4.0, 7.0, 6.0, 7.0, 1.0, 7.0, 4.0, 9.0, 7.0, 8.0, 8.0, 7.0, 5.0, 6.0, 6.0, 4.0, 6.0, 7.0, 9.0, 3.0, 4.0, 4.0, 5.0, 4.0, 1.0, 7.0, 6.0, 8.0, 6.0, 7.0],
                                'Effort': [7871.0, 845.0, 2330.0, 21272.0, 4224.0, 2826.0, 7320.0, 9125.0, 11900.0, 4300.0, 4150.0, 900.0, 583.0, 2565.0, 4047.0, 1520.0, 25910.0, 37286.0, 15052.0, 11039.0, 18500.0, 9369.0, 7184.0, 10447.0, 5100.0, 63694.0, 1651.0, 1450.0, 1745.0, 1798.0, 2957.0, 963.0, 1233.0, 3240.0, 10000.0, 6800.0, 3850.0, 14000.0, 5787.0, 9700.0, 1100.0, 5578.0, 1060.0, 5279.0, 8117.0, 8710.0, 796.0, 11023.0, 1755.0, 5931.0, 4456.0, 3600.0, 4557.0, 8752.0, 3440.0, 1981.0, 13700.0, 7105.0, 6816.0, 4620.0, 7451.0, 39479.0]}

    df = pd.DataFrame(example_maxwell_dataset)
    return df

def DWR_LP4EE_example():
    df = get_example_dataset()
    test_data = df.iloc[0]
    train_data = df.iloc[1:]

    X_train = train_data.drop(columns=['Effort']).values
    y_train = train_data['Effort'].values
    X_test = test_data.drop(labels=['Effort']).values.reshape(1, -1)
    y_test = test_data['Effort']

    alpha = [0.001, 0.01, 0.1, 1, 10, 100, 1000]
    l1_ratio = [0.5]

    predicted_effort = DWR_LP4EE.predict(X_train, y_train, X_test, alpha, l1_ratio)

    print(f'Actual Effort: {y_test:.2f}, Predicted Effort: {predicted_effort:.2f}')

def accuracy_example():
    df = get_example_dataset()

    AE_DWR = np.zeros(len(df))
    AE_ORIG = np.zeros(len(df))

    alpha = [0.001, 0.01, 0.1, 1, 10, 100, 1000]
    l1_ratio = [0.5]

    for i in range(len(df)):
        test_data = df.iloc[i]
        train_data = df.drop(index=i)

        X_train = train_data.drop(columns=['Effort']).values
        y_train = train_data['Effort'].values
        X_test = test_data.drop(labels=['Effort']).values.reshape(1, -1)
        y_test = test_data['Effort']

        AE_DWR[i] = np.abs(y_test - DWR_LP4EE.predict(X_train, y_train, X_test, alpha, l1_ratio))
        AE_ORIG[i] = np.abs(y_test - ORIG_LP4EE.predict(X_train, y_train, X_test)[0][0])

    print(f"DWR-LP4EE Maxwell's MAE, MdAE:  {AE_DWR.mean():.2f}, {np.median(AE_DWR):.2f}")
    print(f"ORIG-LP4EE Maxwell's MAE, MdAE: {AE_ORIG.mean():.2f}, {np.median(AE_ORIG):.2f}")

def speed_example():
    df = get_example_dataset()

    alpha = [0.001, 0.01, 0.1, 1, 10, 100, 1000]
    l1_ratio = [0.5]

    train_data = df
    X_train = train_data.drop(columns=['Effort']).values
    y_train = train_data['Effort'].values

    X_test = X_train[0].reshape(1, -1)

    start_time = time.time()
    for _ in range(10):
        DWR_LP4EE.predict(X_train, y_train, X_test, alpha, l1_ratio)
    dwr_time = time.time() - start_time

    start_time = time.time()
    for _ in range(10):
        ORIG_LP4EE.predict(X_train, y_train, X_test)
    orig_time = time.time() - start_time

    print(f"DWR-LP4EE - Avg. time per prediction: {dwr_time / 10:.4f} seconds")
    print(f"ORIG-LP4EE - Avg. time per prediction: {orig_time / 10:.4f} seconds")

if __name__ == '__main__':
    DWR_LP4EE_example()
    accuracy_example()
    speed_example()